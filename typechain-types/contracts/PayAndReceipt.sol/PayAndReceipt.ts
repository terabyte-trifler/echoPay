/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface PayAndReceiptInterface extends Interface {
  getFunction(
    nameOrSignature: "owner" | "payETH" | "receipt"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ReceiptIssued"): EventFragment;

  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payETH",
    values: [AddressLike, string, string]
  ): string;
  encodeFunctionData(functionFragment: "receipt", values?: undefined): string;

  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "receipt", data: BytesLike): Result;
}

export namespace ReceiptIssuedEvent {
  export type InputTuple = [
    receiptId: BigNumberish,
    payer: AddressLike,
    merchant: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    code: string,
    metaURI: string
  ];
  export type OutputTuple = [
    receiptId: bigint,
    payer: string,
    merchant: string,
    token: string,
    amount: bigint,
    code: string,
    metaURI: string
  ];
  export interface OutputObject {
    receiptId: bigint;
    payer: string;
    merchant: string;
    token: string;
    amount: bigint;
    code: string;
    metaURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PayAndReceipt extends BaseContract {
  connect(runner?: ContractRunner | null): PayAndReceipt;
  waitForDeployment(): Promise<this>;

  interface: PayAndReceiptInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  owner: TypedContractMethod<[], [string], "view">;

  payETH: TypedContractMethod<
    [merchant: AddressLike, code: string, metaURI: string],
    [void],
    "payable"
  >;

  receipt: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "payETH"
  ): TypedContractMethod<
    [merchant: AddressLike, code: string, metaURI: string],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "receipt"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "ReceiptIssued"
  ): TypedContractEvent<
    ReceiptIssuedEvent.InputTuple,
    ReceiptIssuedEvent.OutputTuple,
    ReceiptIssuedEvent.OutputObject
  >;

  filters: {
    "ReceiptIssued(uint256,address,address,address,uint256,string,string)": TypedContractEvent<
      ReceiptIssuedEvent.InputTuple,
      ReceiptIssuedEvent.OutputTuple,
      ReceiptIssuedEvent.OutputObject
    >;
    ReceiptIssued: TypedContractEvent<
      ReceiptIssuedEvent.InputTuple,
      ReceiptIssuedEvent.OutputTuple,
      ReceiptIssuedEvent.OutputObject
    >;
  };
}
